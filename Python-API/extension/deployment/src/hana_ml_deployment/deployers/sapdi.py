"""
This module provides SAP DI related functionality.
"""
import logging
import os
import sys
import json
import urllib3
import requests

logging.getLogger("urllib3").setLevel(logging.WARNING)

logging.getLogger('vflow_swagger_client.rest').setLevel(logging.WARNING)

from importlib import reload
reload(logging)
logging.basicConfig(stream=sys.stdout, format='', level=logging.INFO, datefmt=None)

logger = logging.getLogger(__name__) #pylint: disable=invalid-name

urllib3.disable_warnings()

class SDIDeployer(object):
   """
   This class provides SAP DI deployer related functionality. 

   It allows for deploying SAP DI functionliaty through the ML API
   """
   def __init__(self, scenario_id):
      """
      Initialize the SAP DI Dployer.

      Parameters
      ----------
      scenario_id : str
         The scenario id generated by ML API
      """
      self.scenario_id = scenario_id
      self.vsystem_internal_url = 'http://vsystem-internal:8796'
      self.auth_url = '{}/token/v2'.format(self.vsystem_internal_url)
      self.mlapi_url = '{}/app/ml-api/api/v0alpha1'.format(self.vsystem_internal_url)
      self.auth_token = self._get_auth_token()
     
   def generate_graphs(self):
      """
      Generate the graphs
      """
      train_pl_id, apply_pl_id = self.create_pipelines()
      self.store_in_repo(train_pl_id)
      self.store_in_repo(apply_pl_id)
   
   def create_pipelines(self):
      """
      Create the pipelines according to ML API spec

      Returns
      -------
      train_response_id : str
         The train pipeline id
      apply response_id : str
         The apply pipeline id
      """
      url = self.mlapi_url + '/scenarios/{}/pipelines'.format(self.scenario_id)
      payload_train = "{\n  \"name\": \"Train\",\n  \"description\": \"HANAML Train Pipeline\",\n  \"rating\": 0,\n \"function\": \"training\",\n  \"fromTemplate\": \"com.sap.ml.hana.templateTrain\"\n}"
      payload_apply = "{\n  \"name\": \"Apply\",\n  \"description\": \"HANAML Apply Pipeline\",\n  \"rating\": 0,\n \"function\": \"inference\",\n  \"fromTemplate\": \"com.sap.ml.hana.templateApply\"\n}"
      
      headers = {
         'Content-Type': "application/json",
         'cache-control': "no-cache",
         'Authorization': self.auth_token
      }
      # Create train pipeline
      response = requests.request("POST", url, data=payload_train, headers=headers)
      train_response = response.json()

      # Create apply pipeline
      response = requests.request("POST", url, data=payload_apply, headers=headers)
      apply_response = response.json()
      return train_response['id'], apply_response['id']
   
   def store_in_repo(self, pipeline_id):
      """
      To assure proper storage the data needs to be stored in DataHub repo

      Parameters
      ----------
      pipeline_id : str
         The pipeline id
      """
      url = '{}/repository/v2/files/user/files/vflow/graphs/com/sap/dsp/{}/metadata.json?op=write'.format(self.vsystem_internal_url, pipeline_id)
      payload = {
         "path": '/repository/v2/files/tenant/files/mlsm/com/sap/dsp/{}'.format(pipeline_id),
         "scenarioId": self.scenario_id
      }
      headers = {
         'Content-Type': "application/json",
         'cache-control': "no-cache",
         'Authorization': self.auth_token
      }
      response = requests.request("POST", url, json=payload, headers=headers)
   
   def _get_auth_token(self):
      """
      Get the auth token 

      Returns
      -------
      access_token : str
         The auth token
      """
      # Get Auth Token
      vsystem_app_id = os.environ["VSYSTEM_APP_ID"]
      vsystem_secret = os.environ["VSYSTEM_SECRET"]
      response = requests.get(self.auth_url, auth=(vsystem_app_id, vsystem_secret))
      if response.status_code == 200:
         r = response.json()
         return r['access_token']